searchData={"items":[{"type":"module","doc":"ExESDB is a wrapper around the khepri library. \n  Its intention is to provide an interface to khepri,\n  with a focus on event sourcing.","title":"ExESDB","ref":"ExESDB.html"},{"type":"module","doc":"This module is used to start the ExESDB system.","title":"ExESDB.App","ref":"ExESDB.App.html"},{"type":"function","doc":"","title":"ExESDB.App.handle_info/2","ref":"ExESDB.App.html#handle_info/2"},{"type":"module","doc":"This module contains the environment variables that are used by ExESDB","title":"ExESDB.EnVars","ref":"ExESDB.EnVars.html"},{"type":"function","doc":"Returns the data directory. default: `/data`","title":"ExESDB.EnVars.data_dir/0","ref":"ExESDB.EnVars.html#data_dir/0"},{"type":"function","doc":"Returns the db type. `single` or `cluster`. default: `single`","title":"ExESDB.EnVars.db_type/0","ref":"ExESDB.EnVars.html#db_type/0"},{"type":"function","doc":"Returns the name of the pub/sub. default: `ex_esdb_pub_sub`","title":"ExESDB.EnVars.pub_sub/0","ref":"ExESDB.EnVars.html#pub_sub/0"},{"type":"function","doc":"Returns the seed nodes. default: `nil`","title":"ExESDB.EnVars.seed_nodes/0","ref":"ExESDB.EnVars.html#seed_nodes/0"},{"type":"function","doc":"Returns the khepri store id. default: `ex_esdb_store`","title":"ExESDB.EnVars.store_id/0","ref":"ExESDB.EnVars.html#store_id/0"},{"type":"function","doc":"Returns the timeout in milliseconds. default: `10_000`","title":"ExESDB.EnVars.timeout/0","ref":"ExESDB.EnVars.html#timeout/0"},{"type":"module","doc":"A GenServer wrapper around :khepri to act as an event store.\nInspired by EventStoreDB's API.","title":"ExESDB.EventStore","ref":"ExESDB.EventStore.html"},{"type":"function","doc":"Append events to a stream.","title":"ExESDB.EventStore.append_to_stream/4","ref":"ExESDB.EventStore.html#append_to_stream/4"},{"type":"function","doc":"- `stream_id`: The id of the stream to append to.\n  - `expected_version`: The expected version of the stream (for optimistic concurrency).\n  - `events`: A list of events to append.","title":"Parameters - ExESDB.EventStore.append_to_stream/4","ref":"ExESDB.EventStore.html#append_to_stream/4-parameters"},{"type":"function","doc":"- `{:ok, new_stream_version}` if successful.\n  - `{:error, reason}` if unsuccessful.","title":"Returns - ExESDB.EventStore.append_to_stream/4","ref":"ExESDB.EventStore.html#append_to_stream/4-returns"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"ExESDB.EventStore.child_spec/1","ref":"ExESDB.EventStore.html#child_spec/1"},{"type":"function","doc":"Get the current state of the store.","title":"ExESDB.EventStore.get_state/1","ref":"ExESDB.EventStore.html#get_state/1"},{"type":"function","doc":"- `store`: The store to get the state of.","title":"Parameters - ExESDB.EventStore.get_state/1","ref":"ExESDB.EventStore.html#get_state/1-parameters"},{"type":"function","doc":"- `{:ok, state}`  if successful.\n    - `{:error, reason}` if unsuccessful.","title":"Returns - ExESDB.EventStore.get_state/1","ref":"ExESDB.EventStore.html#get_state/1-returns"},{"type":"function","doc":"Get the list of streams in the store.","title":"ExESDB.EventStore.get_streams/1","ref":"ExESDB.EventStore.html#get_streams/1"},{"type":"function","doc":"- `store`: The store to get the streams from.","title":"Parameters - ExESDB.EventStore.get_streams/1","ref":"ExESDB.EventStore.html#get_streams/1-parameters"},{"type":"function","doc":"- `{:ok, streams}`  if successful.","title":"Returns - ExESDB.EventStore.get_streams/1","ref":"ExESDB.EventStore.html#get_streams/1-returns"},{"type":"function","doc":"Read events from a stream.","title":"ExESDB.EventStore.read_stream_forward/4","ref":"ExESDB.EventStore.html#read_stream_forward/4"},{"type":"function","doc":"- `stream_name`: The name of the stream to read from.\n  - `start_version`: The version to start reading from.\n  - `count`: The number of events to read.","title":"Parameters - ExESDB.EventStore.read_stream_forward/4","ref":"ExESDB.EventStore.html#read_stream_forward/4-parameters"},{"type":"function","doc":"- `{:ok, events}` if successful.\n  - `{:error, reason}` if unsuccessful.","title":"Returns - ExESDB.EventStore.read_stream_forward/4","ref":"ExESDB.EventStore.html#read_stream_forward/4-returns"},{"type":"function","doc":"","title":"ExESDB.EventStore.start_link/1","ref":"ExESDB.EventStore.html#start_link/1"},{"type":"function","doc":"Get the current version of a stream.","title":"ExESDB.EventStore.stream_version/2","ref":"ExESDB.EventStore.html#stream_version/2"},{"type":"function","doc":"- `stream_name`: The name of the stream to check.","title":"Parameters - ExESDB.EventStore.stream_version/2","ref":"ExESDB.EventStore.html#stream_version/2-parameters"},{"type":"function","doc":"- `{:ok, version}` if successful.\n  - `{:error, reason}` if unsuccessful.","title":"Returns - ExESDB.EventStore.stream_version/2","ref":"ExESDB.EventStore.html#stream_version/2-returns"},{"type":"module","doc":"This module provides functions to get information about the EXESDB event store.","title":"ExESDB.EventStoreInfo","ref":"ExESDB.EventStoreInfo.html"},{"type":"function","doc":"Returns the list of streams in the store.","title":"ExESDB.EventStoreInfo.get_streams!/1","ref":"ExESDB.EventStoreInfo.html#get_streams!/1"},{"type":"function","doc":"","title":"ExESDB.EventStoreInfo.get_streams_raw/1","ref":"ExESDB.EventStoreInfo.html#get_streams_raw/1"},{"type":"module","doc":"Messages are based on official proto file","title":"ExESDB.Messages","ref":"ExESDB.Messages.html"},{"type":"type","doc":"","title":"ExESDB.Messages.t/0","ref":"ExESDB.Messages.html#t:t/0"},{"type":"module","doc":"This module contains the options helper functions for ExESDB","title":"ExESDB.Options","ref":"ExESDB.Options.html"},{"type":"function","doc":"","title":"ExESDB.Options.app_env/0","ref":"ExESDB.Options.html#app_env/0"},{"type":"function","doc":"","title":"ExESDB.Options.app_env/1","ref":"ExESDB.Options.html#app_env/1"},{"type":"function","doc":"","title":"ExESDB.Options.data_dir/0","ref":"ExESDB.Options.html#data_dir/0"},{"type":"function","doc":"","title":"ExESDB.Options.db_type/0","ref":"ExESDB.Options.html#db_type/0"},{"type":"function","doc":"","title":"ExESDB.Options.pub_sub/0","ref":"ExESDB.Options.html#pub_sub/0"},{"type":"function","doc":"","title":"ExESDB.Options.seed_nodes/0","ref":"ExESDB.Options.html#seed_nodes/0"},{"type":"function","doc":"","title":"ExESDB.Options.store_id/0","ref":"ExESDB.Options.html#store_id/0"},{"type":"function","doc":"","title":"ExESDB.Options.sys_env/1","ref":"ExESDB.Options.html#sys_env/1"},{"type":"function","doc":"","title":"ExESDB.Options.timeout/0","ref":"ExESDB.Options.html#timeout/0"},{"type":"module","doc":"This module is used to start a REPL with the ExESDB.system running.","title":"ExESDB.Repl","ref":"ExESDB.Repl.html"},{"type":"function","doc":"","title":"ExESDB.Repl.all/1","ref":"ExESDB.Repl.html#all/1"},{"type":"function","doc":"","title":"ExESDB.Repl.append/2","ref":"ExESDB.Repl.html#append/2"},{"type":"function","doc":"","title":"ExESDB.Repl.get_config/0","ref":"ExESDB.Repl.html#get_config/0"},{"type":"function","doc":"","title":"ExESDB.Repl.get_streams/0","ref":"ExESDB.Repl.html#get_streams/0"},{"type":"function","doc":"","title":"ExESDB.Repl.initialize/1","ref":"ExESDB.Repl.html#initialize/1"},{"type":"function","doc":"","title":"ExESDB.Repl.start_monitor/1","ref":"ExESDB.Repl.html#start_monitor/1"},{"type":"function","doc":"","title":"ExESDB.Repl.store/0","ref":"ExESDB.Repl.html#store/0"},{"type":"function","doc":"","title":"ExESDB.Repl.stream1/0","ref":"ExESDB.Repl.html#stream1/0"},{"type":"function","doc":"","title":"ExESDB.Repl.stream2/0","ref":"ExESDB.Repl.html#stream2/0"},{"type":"function","doc":"","title":"ExESDB.Repl.stream3/0","ref":"ExESDB.Repl.html#stream3/0"},{"type":"function","doc":"","title":"ExESDB.Repl.stream4/0","ref":"ExESDB.Repl.html#stream4/0"},{"type":"function","doc":"","title":"ExESDB.Repl.stream5/0","ref":"ExESDB.Repl.html#stream5/0"},{"type":"module","doc":"This module is the top level supervisor for the ExESDB system.\n  It is responsible for supervising:\n  - the event store\n  - the cluster\n  - the Event Enitter (pub/sub)","title":"ExESDB.System","ref":"ExESDB.System.html"},{"type":"function","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","title":"ExESDB.System.child_spec/1","ref":"ExESDB.System.html#child_spec/1"},{"type":"function","doc":"","title":"ExESDB.System.start_link/1","ref":"ExESDB.System.html#start_link/1"},{"type":"module","doc":"This module is used to manipulate bitwise flags.\n\n  Inspired by: [Flags in C#](https://stackoverflow.com/questions/8447/what-does-the-flags-enum-attribute-mean-in-c)\n  \n  Event souurced systems often rely on flags to indicate the state of the aggregate at any given time.\n  In this module, we define a set of functions that can be used to manipulate these flags.","title":"Flags","ref":"Flags.html"},{"type":"function","doc":"","title":"Flags.decompose/1","ref":"Flags.html#decompose/1"},{"type":"function","doc":"","title":"Flags.has?/2","ref":"Flags.html#has?/2"},{"type":"function","doc":"","title":"Flags.has_all?/2","ref":"Flags.html#has_all?/2"},{"type":"function","doc":"","title":"Flags.has_any?/2","ref":"Flags.html#has_any?/2"},{"type":"function","doc":"","title":"Flags.has_not?/2","ref":"Flags.html#has_not?/2"},{"type":"function","doc":"","title":"Flags.highest/2","ref":"Flags.html#highest/2"},{"type":"function","doc":"","title":"Flags.lowest/2","ref":"Flags.html#lowest/2"},{"type":"function","doc":"Returns the bitwise OR of two flags.\n  In other words, it sets the bit that corresopnds to the flag\n  GIVEN: original_state is `0b00100100` (integer: 36) \n  WHEN the flag to be set is `0b01000000` (integer: 64)\n  THEN the result is `0b01100100` (integer: 100)\n\n  Example:\n  iex> Flags.set(36, 64)\n  100","title":"Flags.set/2","ref":"Flags.html#set/2"},{"type":"function","doc":"Returns the bitwise OR of multiple flags against a given state.\n  In other words, it sets the bits that corresopnds to the flags\n  GIVEN: original_state is `0b00100100` (integer: 36)\n  WHEN the flags to be set are `[0b01000000, 0b10000000]` (integers: 64, 128)\n  THEN the result is `0b11100100` (integer: 228)\n\n  Example:\n  iex> Flags.set_all(36, [64, 128])\n  228","title":"Flags.set_all/2","ref":"Flags.html#set_all/2"},{"type":"function","doc":"","title":"Flags.to_list/2","ref":"Flags.html#to_list/2"},{"type":"function","doc":"","title":"Flags.to_string/2","ref":"Flags.html#to_string/2"},{"type":"function","doc":"Returns the bitwise AND of two flags.\n  In other words, it unsets the bit that corresopnds to the flag\n  GIVEN: original_state is `0b01100100` (integer: 100)\n  WHEN the flag to be unset is `0b01000000` (integer: 64)\n  THEN the result is `0b00100100` (integer: 36)\n\n  Example:\n  iex> Flags.unset(100, 64)\n  36","title":"Flags.unset/2","ref":"Flags.html#unset/2"},{"type":"function","doc":"","title":"Flags.unset_all/2","ref":"Flags.html#unset_all/2"},{"type":"extras","doc":"","title":"ADR","ref":"adr.html"},{"type":"extras","doc":"# Changelog","title":"Changelog","ref":"changelog.html"},{"type":"extras","doc":"","title":"version 0.0.1-alpha - Changelog","ref":"changelog.html#version-0-0-1-alpha"},{"type":"extras","doc":"- Initial release","title":"2025.03.25 - Changelog","ref":"changelog.html#2025-03-25"},{"type":"extras","doc":"# Getting Started with ExESDB","title":"Getting Started","ref":"getting-started.html"},{"type":"extras","doc":"Event Sourcing with CQRS is a technique for building applications that are based on an immutable log of events, which makes it ideal for building concurrent, distributed systems.\n\nThough it is gaining popularity, the number of options for storing these events is limited and require specialized services like Kurrent (aka Greg's EventStore) or AxonIQ.\n\nOne of the strong-points of the BEAM is, that it comes 'batteries included': there are BEAM-native libraries for many common tasks, like: storage, pub/sub, caching, logging, telemetry, etc.\n\n`ExESDB` is an attempt to create a BEAM-native Event Store written in Elixir, building further upon the [Khepri](https://github.com/rabbitmq/khepri) library, which in turn builds upon the [Ra](https://github.com/rabbitmq/ra) library.","title":"Introduction - Getting Started","ref":"getting-started.html#introduction"},{"type":"extras","doc":"**This is a work in progress**\n\nThe project is in an early stage of development, and is not ready for production use.\n\nSource code is available on [GitHub](https://github.com/beam-campus/ex-esdb).","title":"Status - Getting Started","ref":"getting-started.html#status"},{"type":"extras","doc":"In your `mix.exs` file:\n\n```elixir\ndef deps do\n  [\n    {:ex_esdb, \"~> 0.0.6-alpha\"}\n  ]\nend\n```","title":"Installation - Getting Started","ref":"getting-started.html#installation"},{"type":"extras","doc":"1. in your `config/config.exs` file:\n\n```elixir\nconfig :ex_esdb, :khepri,\n  # the directory where the khepri store will be created\n  data_dir: \"/data\",\n  # the id of the khepri store.\n  store_id: :ex_esdb_store,\n  # the type of database setup to use\n  db_type: :single,\n  # a global timeout in milliseconds\n  timeout: 10_000,\n  # a list of seed nodes to connect to\n  seed_nodes: [],\n  # the name of the pub/sub module to use\n  pub_sub: :ex_esdb_pub_sub\n\n```\n\n2. from the ENVIRONMENT:\n\n```bash\n\nEX_ESDB_DATA_DIR=\"/data\"\nEX_ESDB_STORE_ID=ex_esdb_store\nEX_ESDB_DB_TYPE=single\nEX_ESDB_TIMEOUT=10000\nEX_ESDB_SEED_NODES=\"\"\nEX_ESDB_PUB_SUB=ex_esdb_pub_sub\n\n```","title":"Configuration - Getting Started","ref":"getting-started.html#configuration"},{"type":"extras","doc":"```elixir\ndefmodule MyApp.Application do\n  use Application\n\n  @impl true\n  def start(_type, _args) do\n    opts = ExESDB.Options.app_env()\n    children = [\n      {ExESDB,System, opts},\n    ]\n\n    opts = [strategy: :one_for_one, name: MyApp.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\n\nend\n```","title":"Usage - Getting Started","ref":"getting-started.html#usage"},{"type":"extras","doc":"","title":"Testing","ref":"testing.html"},{"type":"extras","doc":"# ExESDB - A BEAM-native Event Store\n\n`ExESDB` is a BEAM-native Event Store, built on top of the [khepri](https://github.com/rabbitmq/khepri) and [ra](https://github.com/rabbitmq/ra) subsystems.","title":"Read Me","ref":"readme.html"},{"type":"extras","doc":"One of the arguments for BEAM development is that it comes \"batteries included\". Be it caching, storage, pub/sub, observability etc... the Erlang ecosystem always has the option to avoid external dependencies.\n\nFor Event Sourcing use cases however, the Event Store is often a separate service.\n\nThis project is attempt at addressing this point, by building further upon the work of the `rabbitmq/khepri` and `rabbitmq/ra` subsystems.","title":"Motivation - Read Me","ref":"readme.html#motivation"},{"type":"extras","doc":"- [Getting Started](system/guides/getting_started.md)","title":"Contents - Read Me","ref":"readme.html#contents"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.37.3"}}